import org.jetbrains.DependenciesVersionGetter

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url "https://plugins.gradle.org/m2/" }
        ivy({
            artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/internal/[module](.[ext])")
            artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/[module](.[ext])")
            artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/IntelliJMarkdownParser_Build/[revision]/([module]_[ext]/)[module](.[ext])")
            metadataSources {
                artifact()
            }
        })
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'

        classpath "com.gradle.publish:plugin-publish-plugin:0.13.0"
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
    id 'signing'
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url 'https://kotlin.bintray.com/kotlin-plugin' }
    maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
    maven { url "https://dl.bintray.com/jetbrains/markdown" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url "https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/$bundled_kotlin_compiler_version/maven" }
    ivy({
        artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/internal/[module](.[ext])")
        artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/[module](.[ext])")
        artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/IntelliJMarkdownParser_Build/[revision]/([module]_[ext]/)[module](.[ext])")
        metadataSources {
            artifact()
        }
    })
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url "https://dl.bintray.com/kotlin/kotlinx" }
    maven { url "https://dl.bintray.com/orangy/maven" } // TODO: remove this repository when kotlinx.cli is available in maven
}

allprojects {
    group 'org.jetbrains.dokka'
    version dokka_version
}

subprojects {
    buildscript {
        repositories {
            mavenCentral()
            jcenter()
            maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
            maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
            maven { url "https://plugins.gradle.org/m2/" }
            ivy({
                artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/internal/[module](.[ext])")
                artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/[module](.[ext])")
                artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/IntelliJMarkdownParser_Build/[revision]/([module]_[ext]/)[module](.[ext])")
                metadataSources {
                    artifact()
                }
            })
        }
        dependencies {
            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
            classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'

            classpath "com.gradle.publish:plugin-publish-plugin:0.13.0"
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven { url  "https://dl.bintray.com/jetbrains/markdown" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven { url 'https://jitpack.io' }
        maven { url "https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/$bundled_kotlin_compiler_version/maven" }
        ivy({
            artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/internal/[module](.[ext])")
            artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/Kotlin_dev_CompilerAllPlugins/[revision]/[module](.[ext])")
            artifactPattern("https://teamcity.jetbrains.com/guestAuth/repository/download/IntelliJMarkdownParser_Build/[revision]/([module]_[ext]/)[module](.[ext])")
            metadataSources {
                artifact()
            }
        })
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://dl.bintray.com/kotlin/kotlinx" }
        maven { url "https://dl.bintray.com/orangy/maven" } // TODO: remove this repository when kotlinx.cli is available in maven
    }
}


def bintrayPublication(project, List<String> _publications) {
    configure(project, {
        apply plugin: 'com.jfrog.bintray'

        bintray {
            user = System.getenv('BINTRAY_USER')
            key = System.getenv('BINTRAY_KEY')

            pkg {
                repo = dokka_publication_channel
                name = 'dokka'
                userOrg = 'kotlin'
                desc = 'Dokka, the Kotlin documentation tool'
                vcsUrl = 'https://github.com/kotlin/dokka.git'
                licenses = ['Apache-2.0']
                version {
                    name = dokka_version
                }
            }

            publications = _publications
        }
    })
}

def versions = DependenciesVersionGetter.getVersions(project, bundled_kotlin_compiler_version)

ext.ideaVersion = versions["idea.build.id"]
ext.markdownVersion = versions["markdown.build.id"].replace("%20", " ")

configurations {
    ideaIC
    intellijCore
}

repositories {
    maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
    maven { url 'https://www.jetbrains.com/intellij-repository/releases' }
}

dependencies {
    intellijCore "com.jetbrains.intellij.idea:intellij-core:$ideaVersion"
    ideaIC "com.jetbrains.intellij.idea:ideaIC:$ideaVersion"
}

def intellijCoreAnalysis() {
    return zipTree(configurations.intellijCore.singleFile).matching ({
        include("intellij-core-analysis.jar")
    })
}

def ideaRT() {
    return zipTree(project.configurations.ideaIC.singleFile).matching ({
        include("lib/idea_rt.jar")
    })
}

def repoLocation = uri(file("$buildDir/dist-maven"))

allprojects {
    task publishToDistMaven {
        group "publishing"
        description "Publishes all Maven publications to Maven repository 'distMaven'."
        dependsOn tasks.withType(PublishToMavenRepository).matching {
            it.repository == publishing.repositories.distMaven
        }
    }

    task javadocJar(type: Jar) {
        classifier "javadoc"
    }

    plugins.withType(MavenPublishPlugin) {
        publishing {
            publications {
                configureEach {
                    pom {
                        name.set(project.name)
                        description.set("Dokka is a documentation engine for Kotlin and Java, performing the same function as Javadoc for Java")
                        url.set("https://github.com/Kotlin/dokka")

                        licenses {
                            license {
                                name.set("The Apache Software License, Version 2.0")
                                url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                                distribution.set("repo")
                            }
                        }

                        developers {
                            developer {
                                id.set("JetBrains")
                                name.set("JetBrains Team")
                                organization.set("JetBrains")
                                organizationUrl.set("http://www.jetbrains.com")
                            }
                        }

                        scm {
                            connection.set("scm:git:git://github.com/Kotlin/dokka.git")
                            url.set("https://github.com/Kotlin/dokka/tree/master")
                        }
                    }
                }
            }
            repositories {
                maven {
                    name 'distMaven'
                    url repoLocation
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(System.getenv("SONATYPE_USER"))
            password.set(System.getenv("SONATYPE_PASSWORD"))
        }
    }
}
